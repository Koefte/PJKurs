#include <GPSHelper.h>
#include <ListLibrary.h>
#include <Wire.h>
#include <QMC5883LCompass.h>


#define PPM_FRAME_LENGTH 22500
#define PPM_PULSE_LENGTH 300
#define PPM_CHANNELS 8
#define DEFAULT_CHANNEL_VALUE 1500
#define OUTPUT_PIN 14
#define GPS_RX_PIN 16
#define GPS_TX_PIN 17
#define echoPin 2
#define trigPin 4


const int numParts = 3; // Number of parts to smooth out
const float throhoverpos = 0.35;  // Adjust needed hoverthrust
const float maxChangePerCycleTHRO = 0.02; // Maximum change allowed per cycle
float previousTHROOutput = 0.2; // Track the previous output value


float smoothedValues[numParts][4] = {0}; // Array to store smoothed values
int partIndex = 0; // Index for the current part
int COPTER = 0;
int PLANE = 1;
float distanceSafe = 0.1;
long duration, distance;
float startingALT;
uint16_t channelValue[PPM_CHANNELS] = { 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500 };
QMC5883LCompass compass;
hw_timer_t *timer = NULL;
const float low_threshold = 2.0;   // meters
const float high_threshold = 5.0;  // meters
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;
GPSHelper gps(GPS_RX_PIN, GPS_TX_PIN);

enum ppmState_e {
  PPM_STATE_IDLE,
  PPM_STATE_PULSE,
  PPM_STATE_FILL,
  PPM_STATE_SYNC
};

void IRAM_ATTR onPpmTimer() {

  static uint8_t ppmState = PPM_STATE_IDLE;
  static uint8_t ppmChannel = 0;
  static uint8_t ppmOutput = LOW;
  static int usedFrameLength = 0;
  int currentChannelValue;

  portENTER_CRITICAL(&timerMux);

  if (ppmState == PPM_STATE_IDLE) {
    ppmState = PPM_STATE_PULSE;
    ppmChannel = 0;
    usedFrameLength = 0;
    ppmOutput = LOW;
  }

  if (ppmState == PPM_STATE_PULSE) {
    ppmOutput = HIGH;
    usedFrameLength += PPM_PULSE_LENGTH;
    ppmState = PPM_STATE_FILL;

    timerAlarmWrite(timer, PPM_PULSE_LENGTH, true);
  } else if (ppmState == PPM_STATE_FILL) {
    ppmOutput = LOW;
    currentChannelValue = channelValue[ppmChannel];

    ppmChannel++;
    ppmState = PPM_STATE_PULSE;

    if (ppmChannel >= PPM_CHANNELS) {
      ppmChannel = 0;
      timerAlarmWrite(timer, PPM_FRAME_LENGTH - usedFrameLength, true);
      usedFrameLength = 0;
    } else {
      usedFrameLength += currentChannelValue - PPM_PULSE_LENGTH;
      timerAlarmWrite(timer, currentChannelValue - PPM_PULSE_LENGTH, true);
    }
  }
  portEXIT_CRITICAL(&timerMux);
  digitalWrite(OUTPUT_PIN, ppmOutput);
}
void prepNumArrays(){
  for(int i = 0;i<1;i++){
    for(int a = 0;a<numParts;a++){
       smoothedValues[a][0]=1000;
    }
  }
   for(int u = 1;u<4;u++){
    for(int k = 0;k<numParts;k++){
       smoothedValues[k][u]=1500;
    }
  }
}
void setup() {
  delay(100);
  Serial.begin(9600);
  prepNumArrays();
  Serial.println("FCOMV1: wating for timer");
  delay(20000);
  Serial.println("FCOMV1: setupcompass");
  setUPCompass();
  Serial.println("FCOMV1: setupPPM");
  setUPPPM();
  Serial.println("FCOMV1: setupDistanceSensor");
  setUPSonic();
  Serial.println("FCOMV1: setupGPS");
  setUPGPS();
  Serial.println("FCOMV1: FoundSats");
  armVtol(true);
}
void armVtol(bool state) {
  if (state) {
    channelValue[5] = 2000;  //DroneMode
    delay(3000);
    channelValue[0] = 1000;  //CH1 THRO
    delay(100);
    channelValue[4] = 2000;  //aux1 ARM
    delay(2000);
  } else {
    channelValue[4] = 1000;  //aux1 ARM
  }
}
void loop() {
  flyVtol(6.044819457976702,50.71835025951335,1,0);
  delay(200);
}
void flyVtol(float Tlog, float Tlat, float Talt, int mode) {
  //collect data
  float thro, roll, pitch, yaw;
  float lat = gps.getLatitude();
  float log = gps.getLongitude();
  float alt = getCombHeight(startingALT - gps.getAltitude(), getDistance());
  float Tangle = gps.getAngle(Tlat, Tlog);
  float angle = getBearing();

  if (mode == COPTER) {
    roll = 0.5; //center roll
    pitch = 0.5; //center pitch momentary
    //control height
    thro = pidTHROCon(Talt,alt);
    //rotate to angle
    yaw = pYAWCon(Tangle,angle);
    //move foreward

    //write Signals
   
    writePPMSignals(thro, roll, pitch, yaw);
  }

  
}
float pidTHROCon(float tHeight, float cHeight) {
    bool isnegative = false;

    float error = tHeight - cHeight;
    float error_scaled;

    // Check for negative errors (preparation for conversion)
    if (error == 0) {
        if (0 > error) {
            isnegative = true;
            error = abs(error);
        }
        error_scaled = scaleToUnit(error);
        if (isnegative == false) {
            error_scaled = 1 - error_scaled;
        } else {
            error_scaled = -1 + error_scaled;
        }
    }

    // Calculate the new output
    float newOutput = throhoverpos + error_scaled;

    // Limit the change in output
    float change = newOutput - previousTHROOutput;
    if (change > maxChangePerCycleTHRO) {
        newOutput = previousTHROOutput + maxChangePerCycleTHRO;
    } else if (change < -maxChangePerCycleTHRO) {
        newOutput = previousTHROOutput - maxChangePerCycleTHRO;
    }

    // Update the previous output for the next cycle
    previousTHROOutput = newOutput;

    return newOutput;
}
float pYAWCon(float pTAngle, float pAngle){
  // Calculate absolute difference between the angles
    float diff = abs(pTAngle - pAngle);

    // Check if the difference is greater than 180 degrees
    if (diff > 180) {
        // Subtract 360 degrees from the larger angle
        if (pTAngle > pAngle) {
            pTAngle -= 360;
        } else {
            pAngle -= 360;
        }
    }
    // Calculate the error angle
    float error = pTAngle - pAngle+180;
    float mappedAngleErr = error / 360 - 0.5;
    float output = 0.5 - mappedAngleErr/3;
    return output;
}
float scaleToUnit(float value) {
        return 1 / (1 + value);
}
void writePPMSignals(float thro, float roll, float pitch, float yaw) {
  // Add new values to the smoothedValues array
  smoothedValues[partIndex][0] = 1000 * thro + 1000;  // CH1 THRO
  smoothedValues[partIndex][1] = 1000 * roll + 1000;  // CH2 ROLL
  smoothedValues[partIndex][2] = 1000 * pitch + 1000; // CH3 PITCH
  smoothedValues[partIndex][3] = 1000 * yaw + 1000;   // CH4 YAW


  // Increment the part index
  partIndex = (partIndex + 1) % numParts;

  // Calculate the average of each smoothed value
  float avgValues[PPM_CHANNELS] = {0};
  for (int i = 0; i < PPM_CHANNELS; ++i) {
    float sum = 0;
    for (int j = 0; j < numParts; ++j) {
      sum += smoothedValues[j][i];
    }
    avgValues[i] = sum / numParts;
  }

  // Write the averaged values to channelValue array
  channelValue[0] = avgValues[0]; // CH1 THRO
  channelValue[1] = avgValues[1]; // CH2 ROLL
  channelValue[2] = avgValues[2]; // CH3 PITCH
  channelValue[3] = avgValues[3]; // CH4 YAW
  channelValue[4] = 2000;  //aux1 ARM
  //Serial.println(channelValue[0]);
}


void setUPGPS() {
  gps.begin();
  if (gps.fetch()) {
    while (7 > gps.getSatellites()) {
      Serial.println(gps.getSatellites());
      delay(1000);
    }
  }
  startingALT = gps.getAltitude();
}
void setUPCompass() {
  compass.init();
  compass.setCalibrationOffsets(247.00, 892.00, -109.00);
  compass.setCalibrationScales(0.93, 1.02, 1.07);
}
void setUPSonic() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}
float getBearing() {
  compass.read();
  return compass.getAzimuth()+180;
}
void setUPPPM() {
  pinMode(OUTPUT_PIN, OUTPUT);
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &onPpmTimer, true);
  timerAlarmWrite(timer, 12000, true);
  timerAlarmEnable(timer);
}
float getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = duration / 58.2;

  if (distance > 500) {
    return distanceSafe;  // Return last value above 500
  } else {
    distanceSafe = distance;
    return distance;
  }
}
float getCombHeight(float heightGps, float heightSonic) {
  float ultrasonicWeight = scaleToUnit(heightSonic - low_threshold);
  float gpsWeight = 1 - ultrasonicWeight;
  return ((heightSonic / 100.0) * ultrasonicWeight) + (heightGps * gpsWeight);
}
